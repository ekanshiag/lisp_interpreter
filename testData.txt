(define circle-area (lambda (r) (* pi (* r r))))
(circle-area 3)
(define fact (lambda (n) (if (<= n 1) 1 (* n (fact (- n 1))))))
(fact 10)
(fact 100)
(circle-area (fact 10))
(define twice (lambda (x) (* 2 x)))
(twice 5)
(define repeat (lambda (f) (lambda (x) (f (f x)))))
((repeat twice) 10)
((repeat (repeat twice)) 10)
((repeat (repeat (repeat twice))) 10)
((repeat (repeat (repeat (repeat twice)))) 10)
(pow 2 16)
(define fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))))
(define range (lambda (a b) (if (= a b) (quote ()) (cons a (range (+ a 1) b)))))
(range 0 10)
(map fib (range 0 10))
(map fib (range 0 20))
(+ 2
3)
(begin (define r 10)
(* 2 r)
(+ 2 2))
(+ 2 3)