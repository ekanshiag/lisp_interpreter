(define circle-area (lambda (r) (* pi (* r r))))
(circle-area 3)
(define fact (lambda (n) (if (<= n 1) 1 (* n (fact (- n 1))))))
(fact 10)
(fact 100)
(circle-area (fact 10))
(define twice (lambda (x) (* 2 x)))
(twice 5)
(define repeat (lambda (f) (lambda (x) (f (f x)))))
((repeat twice) 10)
((repeat (repeat twice)) 10)
((repeat (repeat (repeat twice))) 10)
((repeat (repeat (repeat (repeat twice)))) 10)
(pow 2 16)
(define fib (lambda (n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2))))))
(define range (lambda (a b) (if (= a b) (quote ()) (cons a (range (+ a 1) b)))))
(range 0 10)
(map fib (range 0 10))
(map fib (range 0 20))
(begin (define r 10)
(* 2 r))
(set! r 1000)
r
(symbol? (quote foo))
(symbol? (quote ()))
(append (quote (a)) (quote (b (c))))
(length (quote (a b c)))
(list (quote a) (+ 3 4) (quote c))
(list? (quote a b c))
(cons (quote (a)) (quote (b c d)))
(apply + (list 3 4))
(define compose
  (lambda (f g)
    (lambda args
      (f (apply g args)))))
((compose sqrt *) 12 12)
(map (lambda (n) (expt n n))
     (quote (1 2 3 4 5)))
(define r 10